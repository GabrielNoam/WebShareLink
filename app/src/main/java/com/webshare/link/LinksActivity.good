package com.webshare.link;

import java.lang.reflect.Field;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.widget.SearchView;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewConfiguration;
import android.widget.ImageView;
import android.widget.ListView;

public class LinksActivity extends ActionBarActivity 
{
	private ListView linksListView;
	protected LinksSQLiteHandler handler;

	private ImageView mSplashImageView;
	private SearchView searchView;
	private DrawerLayout mDrawerLayout;
	private View mDrawerView;

	private ListView mDrawerCategoriesList;
	private ActionBarDrawerToggle mDrawerToggle;

	private CharSequence mTitle;

	private boolean isResumed = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.links);
		
		handler = new LinksSQLiteHandler(this);

		ActionBar actionBar = getActionBar();
		actionBar.setTitle("WebShareLink");
		actionBar.setSubtitle("Your link for success");

		// actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
		actionBar.setHomeButtonEnabled(true);
		// actionBar.setBackgroundDrawable(getResources().getDrawable(R.drawable.actionbar_bg));
		getOverflowMenu();

		mTitle = "Web Share Link";// getTitle();
		mSplashImageView = (ImageView) findViewById(R.id.splashImageView);
		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		mDrawerView = findViewById(R.id.drawer);
		
		linksListView = (ListView) findViewById(R.id.linksListView);
		
		// set a custom shadow that overlays the main content when the drawer
		// opens
		mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,
				GravityCompat.START);
		// set up the drawer's list view with items and click listener

		// enable ActionBar app icon to behave as action to toggle nav drawer
		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		// ActionBarDrawerToggle ties together the the proper interactions
		// between the sliding drawer and the action bar app icon
		mDrawerToggle = new CustomActionBarDrawerToggle(this, /* host Activity */
		mDrawerLayout, /* DrawerLayout object */
		R.drawable.ic_drawer, /* nav drawer image to replace 'Up' caret */
		R.string.drawer_open, /* "open drawer" description for accessibility */
		R.string.drawer_close /* "close drawer" description for accessibility */);

		mDrawerLayout.setDrawerListener(mDrawerToggle);

		if (savedInstanceState == null) {
		}

		// registerForContextMenu(listView);
	}

	
	

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);

		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.links_menu, menu);
		
		return true;
	}

	

	@Override
	public void onBackPressed() {
		if (((CustomActionBarDrawerToggle) mDrawerToggle).isClosed()) {
			super.onBackPressed();
		} else {
			mDrawerLayout.closeDrawer(mDrawerView);
		}

	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		if (mDrawerToggle.onOptionsItemSelected(item)) {
			return true;
		}

		int id = item.getItemId();
		switch (id) {
		
		case R.id.action_settings:
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public boolean onQueryTextChange(String newText) {
		// mStatusView.setText("Query = " + newText);
		return false;
	}

	public boolean onQueryTextSubmit(String query) {
		// mStatusView.setText("Query = " + query + " : submitted");
		return false;
	}

	public boolean onClose() {
		// mStatusView.setText("Closed!");
		return false;
	}

	protected boolean isAlwaysExpanded() {
		return false;
	}

	private void selectItem(int position) {

		// update selected item and title, then close the drawer
		mDrawerCategoriesList.setItemChecked(position, true);
		mDrawerLayout.closeDrawer(mDrawerCategoriesList);
	}

	@Override
	public void setTitle(CharSequence title) {
		mTitle = title;
		getActionBar().setTitle(mTitle);
	}

	/**
	 * When using the ActionBarDrawerToggle, you must call it during
	 * onPostCreate() and onConfigurationChanged()...
	 */

	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		mDrawerToggle.syncState();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		// Pass any configuration change to the drawer toggls
		mDrawerToggle.onConfigurationChanged(newConfig);
	}

	@Override
	protected void onResume() {
		super.onResume();

		
	}

	
	private void getOverflowMenu() {

		try {
			ViewConfiguration config = ViewConfiguration.get(this);
			Field menuKeyField = ViewConfiguration.class
					.getDeclaredField("sHasPermanentMenuKey");
			if (menuKeyField != null) {
				menuKeyField.setAccessible(true);
				menuKeyField.setBoolean(config, false);
			}
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

	private class CustomActionBarDrawerToggle extends ActionBarDrawerToggle
	{
		private Activity activity;
		private DrawerLayout drawerLayout;
		private boolean isClosed = true;

		public CustomActionBarDrawerToggle(Activity activity,
				DrawerLayout drawerLayout, int drawerImageRes,
				int openDrawerContentDescRes, int closeDrawerContentDescRes)
		{
			super(activity, drawerLayout, drawerImageRes, openDrawerContentDescRes,
					closeDrawerContentDescRes);
			
			this.activity = activity;
			this.drawerLayout = drawerLayout;
		}
		@Override
	    public boolean onOptionsItemSelected(MenuItem item) {
	        if (item != null && item.getItemId() == android.R.id.home) {
	            if (drawerLayout.isDrawerOpen(Gravity.LEFT)) {
	            	drawerLayout.closeDrawer(Gravity.LEFT);
	            } else {
	            	drawerLayout.openDrawer(Gravity.LEFT);
	            }
	        }
	        return false;
	    }
		
		@Override
		public void onDrawerClosed(View view) {
			//activity.getActionBar().setTitle(mTitle);
			activity.invalidateOptionsMenu(); // creates call to
										// onPrepareOptionsMenu()
			isClosed = true;
		}
		@Override
		public void onDrawerOpened(View drawerView) {
			//activity.getActionBar().setTitle(mDrawerTitle);
			activity.invalidateOptionsMenu(); // creates call to
										// onPrepareOptionsMenu()
			isClosed = false;
		}
		
		public boolean isClosed()
		{
			return isClosed;
		}
	}


}
